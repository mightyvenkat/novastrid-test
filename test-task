tar -xvzf file_name ----> extract the files
task 1 : 
-----------------

task : 1.1  --------> Backup Application Files and Logs:
-----------------
#!/bin/bash

source_dir="/var/www/app"
backup_dir = "backup"
date=$(date +%F)
backup_file="app-backup.tar.gz"
retention_days=7
mkdir -p "$backup_dir"
tar -czf "$backup_dir/$backup_file" "$source_dir"
if [[$? -eq 0]]
   echo "backup successfully taken"
$backup_dir/$backup_file
else
   echo "backup failed"
   exit 1

## task 1.2 ----> Clean Old Backups
--------------------------------

find "backup_dir" -name
"app-backup-*.tar.gz" -mtime +
$RETENTION_DAYS -exec rm -f {} \;

echo "old backups older than $retention_days days deleted"

task 1.3
-----------
exit 0

task 1.4 ------ Scheduling the Script with Cron
---------------------------------------------------
apt install crontab ---> if we use ubuntu

crontab -e --> vi editor has open

0 0 * * * /mnt/backup_file




task2 :  Containerize a Web Application using Docker (python)
-----------------------------------------------------

app.py 
----------
from flask import flask

app = flask (venkat)

def hello()
   return "this is venkat app"

if venkat == "main":

     app.run(host="0.0.0.0,port=8080")

requirements.txt
----------------
echo "flask=2.2.5"

Dockerfile
--------------

FROM python:3.9-slim
WORKDIR /app
copy . .
RUN pip install -r requirements.txt
EXPOSE 8080
CMD ["python","app.py"]

docker build -t myappimg . ------> run command to buid the image

docker run -itd -p 8080 --name myappcon myappimg ------> run command to up the container

curl http://localhost:8080  -------> testing


task3 --> Infrastructure Provisioning and Monitoring with Terraform & Prometheus
------------------------------------------------------------------------------------

terraform for ec2
-------------------------

provider.tf
---------------

terraform{
  required providers{
    aws {
      source = "hashicorp/aws"
      version ~> "5.0"
    }
  }
}

provider "aws" {
   region = var.aws_region

}

main.tf
---------
resource "aws_instance" "myec2" {
ami = var.ami_id
instance_type = var.instance_type
key_name = var.key_name
tags = {
  NAME = "myec2"
 }

 user_date = <<-EOF
            #!/bin/bash
             sudo apt update -y
             sudo apt install apache -y
            EOF
}


variable.tf
---------------
variable "aws_region"{
   description = "aws_region" 
   default = "us-east-2"
}

variable "ami_id"{
   description = "ami-id" 
   default = "ami-123456789"
}

variable "instance_type"{
   description = "instance_type" 
   default = "t2.medium"
}

variable "key_name"{
   description = "key_name" 
   user_date = filename ("myec2.ppk")
}

output.tf
-------------

output "instance_public_ip" {
    description = "public ip of ec2"
    value = aws_instance.myec2.public_ip
}

execution command
-----------------------

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply --auto-approve

prometheus setup
---------------------

install prometheus on our ec2

target scarpe
---------------
global:
  scrape_interval: 15s

scarpe_configs:
   - job_name: "ec2-node"
     static_configs:
         -targets: 
             ["10.0.0.0:9100"]
now the prometheus target the desired node




